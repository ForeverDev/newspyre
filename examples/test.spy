func factorial_recursive(n : int) -> int {
	if n == 1 {
		return 1;
	}
	return n * factorial_recursive(n - 1);
}

func factorial_iteration(n : int) -> int {
	result : int;
	index : int;

	result = 1;
	index = 0;
	
	while n > 1 {
		result = result * n;
		n = n - 1;
	}

	return result;
}	

func fibonacci(n : int) -> int {
	if n <= 0 {
		return 0;
	}
	if n == 1 || n == 2 {
		return 1;
	}
	return fibonacci(n - 1) + fibonacci(n - 2);
}	

func print_grid(x_dimension : int, y_dimension : int, grid_str : string) -> null {
	start_x : int;

	start_x = x_dimension;

	while y_dimension > 0 {
		while x_dimension > 0 {
			print("%s   ", grid_str);
			x_dimension = x_dimension - 1;
		}
		print("\n\n");
		y_dimension = y_dimension - 1;
		x_dimension = start_x;
	}
}

func map(n : float, a : float, b : float, c : float, d : float) -> float {
	return (n - a) / (b - a) * (d - c) + c;
}

func draw_mandelbrot(size : float, iterations : float) -> null {
	x_pos : float;
	y_pos : float;
	iter : float;
	px : float;
	py : float;
	zx : float;
	zy : float;
	tmp : float;

	x_pos = 0.0;
	y_pos = 0.0;

	while y_pos < size {
		while x_pos < size {
			px = map(x_pos, 0.0, size, 0.0 - 2.0, 1.0);			
			py = map(y_pos, 0.0, size, 0.0 - 1.5, 1.5);
			x_pos = x_pos + 1.0;
			iter = 0.0;
			zx = 0.0;
			zy = 0.0;
			while (iter < iterations) && (zx*zx + zy*zy <= 4.0) {
				tmp = zx*zy;
				zx = zx*zx - zy*zy + px;
				zy = tmp*2.0 + py;
				iter = iter + 1.0;
			}
			if iter == iterations {
				print("  ");
			}
			if iter < iterations {
				print("X ");
			}
		}
		print("\n");
		x_pos = 0.0;
		y_pos = y_pos + 1.0;
	}
}

func main() -> null {
	input : int;
	grid_x : int;
	grid_y : int;

	num_map : float;
	old_range_bottom : float;
	old_range_top : float;
	new_range_bottom : float;
	new_range_top : float;

	input = 6;
	grid_x = 15;
	grid_y = 6;

	num_map = 20.0;
	old_range_bottom = 10.0;
	old_range_top = 30.0;
	new_range_bottom = 50.0;
	new_range_top = 100.0;
	
	println(
		"%f mapped from [%f, %f] to [%f, %f] is %f",
		num_map,
		old_range_bottom,
		old_range_top,
		new_range_bottom,
		new_range_top,
		map(num_map, old_range_bottom, old_range_top, new_range_bottom, new_range_top)
	);

	println("\niterative factorial of %d calculated to be: %d", input, factorial_iteration(input));
	println("recursive factorial of %d calculated to be: %d", input, factorial_recursive(input));
	println("recursive fibonacci of %d calculated to be: %d\n", input, fibonacci(input));
	println("now printing a grid of size %d x %d\n", grid_x, grid_y);
	print_grid(grid_x, grid_y, "X");
	draw_mandelbrot(50.0, 100.0);

	
}
