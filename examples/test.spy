func factorial_recursive(n : int) -> int {
	if n == 1 {
		return 1;
	}
	return n * factorial_recursive(n - 1);
}

func factorial_iteration(n : int) -> int {
	result : int;
	index : int;

	result = 1;
	index = 0;
	
	while n > 1 {
		result = result * n;
		n = n - 1;
	}

	return result;
}	

func fibonacci(n : int) -> int {
	if n <= 0 {
		return 0;
	}
	if n == 1 || n == 2 {
		return 1;
	}
	return fibonacci(n - 1) + fibonacci(n - 2);
}	

func print_grid(x_dimension : int, y_dimension : int, grid_str : string) -> null {
	start_x : int;

	start_x = x_dimension;

	while y_dimension > 0 {
		while x_dimension > 0 {
			print("%s   ", grid_str);
			x_dimension = x_dimension - 1;
		}
		print("\n\n");
		y_dimension = y_dimension - 1;
		x_dimension = start_x;
	}
}

func main() -> null {
	input : int;
	grid_x : int;
	grid_y : int;

	input = 5;
	grid_x = 15;
	grid_y = 6;
	
	println("\niterative factorial of %d calculated to be: %d", input, factorial_iteration(input));
	println("recursive factorial of %d calculated to be: %d", input, factorial_recursive(input));
	println("recursive fibonacci of %d calculated to be: %d\n", input, fibonacci(input));
	println("now printing a grid of size %d x %d\n", grid_x, grid_y);
	print_grid(grid_x, grid_y, "X");
}






