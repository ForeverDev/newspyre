main stack
0x00			-> INF name
0x01			-> INF handle
0x02			-> INF contents
0x03			-> INF length
0x04			-> current character
0x05			-> line count
0x06			-> token list
[0x50, 0x100)	-> general purpose
[0x100, 0x180)	-> jump table
---------------------------------------
INSTRUCTION MAP
0 -> name
1 -> opcode
2 -> operand1
3 -> operand2

OPERAND TYPES
0 -> NO_OPERAND
1 -> INT32
2 -> INT64
3 -> FLOAT64

TOKEN MAP
0 -> type
1 -> word
2 -> next

__Token_new 
args
	0 -> type
	1 -> word

__Token_append
args
	0 -> head
	1 -> type
	2 -> word

__Token_print
args
	0 -> head

CHUNK MAP
0 -> type
1 -> sections
2 -> next
3 -> children

SECTION MAP
0 -> token
1 -> next

__Chunk_new
args
	0 -> type
	1 -> sections

__Chunk_appendSection
args
	0 -> chunk
	1 -> word


TOKEN TYPES
0	-> null
1	-> identifier
2	-> string
3	-> number
4	-> not !
5	-> mod %
6	-> addr &
7	-> logical and &&
8	-> single quote '
9	-> open par (
10	-> close par )
11	-> asterisck *
12	-> multiplyN *=
13	-> plus +
14	-> increment ++
15	-> incrementN +=
16	-> comma ,
17	-> hyphon -
18	-> decrement --
19	-> decrementN -=
20	-> arrow ->
21	-> dot .
22	-> slash /
23	-> comment //
24	-> colon :
25	-> double colon ::
26	-> semicolon ;
27	-> lt <
28	-> le <=
29	-> shl <<
30	-> assign =
31	-> cmp ==
32	-> gt >
33	-> ge >=
34	-> shr >>
35	-> question ?
36	-> opensq [
37	-> closesq ]
38	-> xor ^
39	-> opencurl {
40	-> or |
41	-> lor ||
42	-> closecurl }
43	-> unary ~
44	-> IF
45	-> WHILE
46	-> FOR
47	-> FUNC
48	-> DO
49	-> RETURN
50	-> CONTINUE
51	-> BREAK
