; C functions that are needed
let print		"print"
let println		"println"

let malloc		"malloc"
let free		"free"

let fopen		"fopen"
let fclose		"fclose"
let fputc		"fputc"
let fputs		"fputs"
let fseek		"fseek"
let ftell		"ftell"
let fread		"fread"
let fgetc		"fgetc"

; Constant strings
let format_char	"%c"
let format_int	"%d"
let format_hex	"%x"
let format_ptr	"%p"
let format_str	"%s"

jmp main

; args
; 0 -> pointer to string
strlen:
	iarg	0 ; string (0x00)
	ipush	0 ; length (0x01)
A00:
	; *string == 0
	ilload	0x00
	cder
	ipush	0
	icmp
	jnz		A01
	
	; string++
	ilload	0x00
	icinc	1
	ilsave	0x00
	
	; length++
	ilload	0x01
	icinc	1
	ilsave	0x01

	jmp		A00
A01:
	; return length
	ilload	0x01
	iret

; args
;	0 -> char n
isdigit:
	iarg	0
	ipush	'0'
	ige
	iarg	0
	ipush	'9'
	ige
	land
	iret

; args
;	0 -> char n
isalpha:
	iarg	0
	ipush	'a'
	ige
	iarg	0
	ipush	'z'
	ige
	land
	iarg	0
	ipush	'A'
	ige
	iarg	0
	ipush	'Z'
	ige
	land
	lor
	iret

; args
;	0 -> char n
isalnum:
	iarg	0
	call	isalpha, 1
	iarg	0
	call	isdigit, 1
	lor
	iret

; token format
;	0 -> type
;	1 -> word
;	2 -> next

; args
;	0 -> type
;	1 -> word
;	2 -> next
__Token_new:
	ipush	0 ; 0x00 -> token storage

	; token = malloc(3);
	ipush	3
	ccall	malloc
	ilsave	0x00
	
	; token->type = args[0x00]
	ilload	0x00
	padd	0
	iarg	0
	isave

	; token->word = malloc(strlen(args[0x01]) + 1);
	ilload	0x00
	padd	1
	iarg	1
	call	strlen, 1
	ipush	1
	iadd
	ccall	malloc
	isave

	; token->next = args[0x02];
	ilload	0x00
	padd	2
	iarg	2
	isave
	
	; return token;
	ilload	0x00
	iret
	

; args:
;	0 -> nargs (can ignore)
;	1 -> input file name
main:
	res		0x100

	; stack map
	;	0x00 input file name
	;	0x01 input file handle
	;	0x02 input file contents
	;	0x03 input file contents length
	;	0x04 current character
	;	0x05 line count

	;	[0x50, 0x100) general purpose

	; @ s[0x05] = 0
	ipush	0
	ilsave	0x05

	; @ s[0x00] = inf_name
	iarg	1
	ilsave	0x00	
	
	; @ s[0x01] = fopen(s[0x00], "rb");	
	let		inf_readmode "rb"
	ipush	inf_readmode
	ilload	0x00
	ccall	fopen
	ilsave	0x01

	; @ s[0x02] contains contents of inf
	; @ fseek(s[0x01], SEEK_END, 0);
	ipush	0
	ipush	2
	ilload	0x01
	ccall	fseek
	; @ s[0x03] = ftell(s[0x01]);
	ilload	0x01
	ccall	ftell
	ilsave	0x03
	; @ fseek(s[0x01], SEEK_SET, 0);
	ipush	0
	ipush	1
	ilload	0x01
	ccall	fseek
	; @ s[0x02] = malloc(s[0x03]);
	ilload	0x03
	ccall	malloc
	ilsave	0x02
	; @ fread(s[0x01], s[0x02], s[0x03]);
	ilload	0x03
	ilload	0x02
	ilload	0x01
	ccall	fread

B00:
	; while (*s[0x02]);
	ilload	0x02
	cder
	jz		B01

	; @ s[0x04] = *s[0x02]++
	ilload	0x02
	cder	
	ilsave	0x04
	ilload	0x02
	icinc	1
	ilsave	0x02
	
	; if (s[0x04] == ' ' || s[0x04] == '\t') continue;
	ilload	0x04
	ipush	' '
	icmp
	ilload	0x04
	ipush	'\t'
	icmp
	lor
	jnz		Bcont

	; if (s[0x04] == '\n') s[0x05]++; continue;
	ilload	0x04
	ipush	'\n'
	icmp
	jz		B07
	ilload	0x05
	icinc	1
	ilsave	0x05
	jmp		Bcont
B07:
	
	ilload	0x04
	call	isdigit, 1
	ipush	format_int
	ccall	println

	; if (isdigit(s[0x04])) goto B02;
	ilload	0x04
	call	isdigit, 1
	jnz		B02
	; if (isalpha(s[0x04])) goto B03;
	ilload	0x04
	call	isalpha, 1
	jnz		B03
B02: ; is a number
	
	jmp		Bcont
B03:
	jmp		Bcont
B04:
B05:
B06:

Bcont: ; continue label
	
	jmp		B00
B01:
	ipush	0
